{
  "!=": {
    "body": [
      "!="
    ],
    "description": "",
    "prefix": "!="
  },
  "<": {
    "body": [
      "<"
    ],
    "description": "",
    "prefix": "<"
  },
  "<=": {
    "body": [
      "<="
    ],
    "description": "",
    "prefix": "<="
  },
  "==": {
    "body": [
      "=="
    ],
    "description": "",
    "prefix": "=="
  },
  ">": {
    "body": [
      ">"
    ],
    "description": "",
    "prefix": ">"
  },
  ">=": {
    "body": [
      ">="
    ],
    "description": "",
    "prefix": ">="
  },
  "boolean": {
    "body": [
      "boolean"
    ],
    "description": "Return true if object is a boolean (in a strict sense, not in its ability to evaluate to a truthy expression)",
    "prefix": "boolean"
  },
  "containing": {
    "body": [
      "containing"
    ],
    "description": "Returns true if a list contains a value\nParameters:\n- value(object) The value to check is in the list",
    "prefix": "containing"
  },
  "containingall": {
    "body": [
      "containingall"
    ],
    "description": "Returns true if a list contains all values in a second list\nParameters:\n- list_two(list) The second list to check if every element is in the first list",
    "prefix": "containingall"
  },
  "defined": {
    "body": [
      "defined"
    ],
    "description": "Return true if the variable is defined",
    "prefix": "defined"
  },
  "divisibleby": {
    "body": [
      "divisibleby"
    ],
    "description": "Returns true if a variable is divisible by a number\nParameters:\n- divisor(number) The number to check whether a number is divisible by",
    "prefix": "divisibleby"
  },
  "eq": {
    "body": [
      "eq"
    ],
    "description": "",
    "prefix": "eq"
  },
  "equalto": {
    "body": [
      "equalto"
    ],
    "description": "Returns true if an object has the same value as another object\nParameters:\n- other(object) Another object to check equality against",
    "prefix": "equalto"
  },
  "even": {
    "body": [
      "even"
    ],
    "description": "Returns true if the value is even",
    "prefix": "even"
  },
  "false": {
    "body": [
      "false"
    ],
    "description": "Return true if object is a boolean and false",
    "prefix": "false"
  },
  "float": {
    "body": [
      "float"
    ],
    "description": "Return true if object is a float",
    "prefix": "float"
  },
  "ge": {
    "body": [
      "ge"
    ],
    "description": "Returns true if the first object's value is greater than or equal to the second object's value\nParameters:\n- other(object) Another object to compare against",
    "prefix": "ge"
  },
  "greaterthan": {
    "body": [
      "greaterthan"
    ],
    "description": "",
    "prefix": "greaterthan"
  },
  "gt": {
    "body": [
      "gt"
    ],
    "description": "Returns true if the first object's value is strictly greater than the second\nParameters:\n- other(object) Another object to compare against",
    "prefix": "gt"
  },
  "in": {
    "body": [
      "in"
    ],
    "description": "Returns true if value is contained in the iterable\nParameters:\n- list(object) The iterable to check for the value",
    "prefix": "in"
  },
  "integer": {
    "body": [
      "integer"
    ],
    "description": "Return true if object is an integer or long",
    "prefix": "integer"
  },
  "iterable": {
    "body": [
      "iterable"
    ],
    "description": "Return true if the object is iterable (sequence, dict, etc)",
    "prefix": "iterable"
  },
  "le": {
    "body": [
      "le"
    ],
    "description": "Returns true if the first object's value is less than or equal to the second object's value\nParameters:\n- other(object) Another object to compare against",
    "prefix": "le"
  },
  "lessthan": {
    "body": [
      "lessthan"
    ],
    "description": "",
    "prefix": "lessthan"
  },
  "lower": {
    "body": [
      "lower"
    ],
    "description": "Return true if the given string is all lowercase",
    "prefix": "lower"
  },
  "lt": {
    "body": [
      "lt"
    ],
    "description": "Returns true if the first object's value is strictly less than the second\nParameters:\n- other(object) Another object to compare against",
    "prefix": "lt"
  },
  "mapping": {
    "body": [
      "mapping"
    ],
    "description": "Return true if the given object is a dict",
    "prefix": "mapping"
  },
  "ne": {
    "body": [
      "ne"
    ],
    "description": "Returns true if an object has the different value from another object\nParameters:\n- other(object) Another object to check inequality against",
    "prefix": "ne"
  },
  "none": {
    "body": [
      "none"
    ],
    "description": "Return true if the given object is null / none",
    "prefix": "none"
  },
  "number": {
    "body": [
      "number"
    ],
    "description": "Return true if the object is a number",
    "prefix": "number"
  },
  "odd": {
    "body": [
      "odd"
    ],
    "description": "Return true if a number is an odd number",
    "prefix": "odd"
  },
  "sameas": {
    "body": [
      "sameas"
    ],
    "description": "Return true if variable is pointing at same object as other variable\nParameters:\n- other(object) A second object to check the variables value against",
    "prefix": "sameas"
  },
  "sequence": {
    "body": [
      "sequence"
    ],
    "description": "Return true if the variable is a sequence. Sequences are variables that are iterable.",
    "prefix": "sequence"
  },
  "string": {
    "body": [
      "string"
    ],
    "description": "Return true if object is a string",
    "prefix": "string"
  },
  "string_containing": {
    "body": [
      "string_containing"
    ],
    "description": "Return true if object is a string which contains a specified other string\nParameters:\n- check(string) A second string to check is contained in the first string",
    "prefix": "string_containing"
  },
  "string_startingwith": {
    "body": [
      "string_startingwith"
    ],
    "description": "Return true if object is a string which starts with a specified other string\nParameters:\n- check(string) A second string to check is the start of the first string",
    "prefix": "string_startingwith"
  },
  "true": {
    "body": [
      "true"
    ],
    "description": "Return true if object is a boolean and true",
    "prefix": "true"
  },
  "truthy": {
    "body": [
      "truthy"
    ],
    "description": "Return true if object is 'truthy'",
    "prefix": "truthy"
  },
  "undefined": {
    "body": [
      "undefined"
    ],
    "description": "Return true if object is undefined",
    "prefix": "undefined"
  },
  "upper": {
    "body": [
      "upper"
    ],
    "description": "Return true if string is all uppercased",
    "prefix": "upper"
  },
  "within": {
    "body": [
      "within"
    ],
    "description": "",
    "prefix": "within"
  }
}
