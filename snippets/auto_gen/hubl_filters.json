{
  "abs": {
    "body": [
      "|abs"
    ],
    "description": "Return the absolute value of the argument.",
    "prefix": "|abs"
  },
  "add": {
    "body": [
      "|add(${1:addend})"
    ],
    "description": "adds a number to the existing value\nParameters:\n- addend(number) The number added to the base number",
    "prefix": "|add"
  },
  "allow_snake_case": {
    "body": [
      "|allow_snake_case"
    ],
    "description": "Allow keys on the provided camelCase map to be accessed using snake_case",
    "prefix": "|allow_snake_case"
  },
  "attr": {
    "body": [
      "|attr('${1:name}')"
    ],
    "description": "Renders the attribute of a dictionary\nParameters:\n- name(String) The dictionary attribute name to access",
    "prefix": "|attr"
  },
  "b64decode": {
    "body": [
      "|b64decode(${1:encoding})"
    ],
    "description": "Decode a base 64 input into a string.\nParameters:\n- encoding(string) The string encoding charset to use.",
    "prefix": "|b64decode"
  },
  "b64encode": {
    "body": [
      "|b64encode(${1:encoding})"
    ],
    "description": "Encode the string input into base 64.\nParameters:\n- encoding(string) The string encoding charset to use.",
    "prefix": "|b64encode"
  },
  "batch": {
    "body": [
      "|batch(${1:linecount}, '${2:fill_with}')"
    ],
    "description": "A filter that groups up items within a sequence\nParameters:\n- linecount(number) Number of items to include in the batch\n- fill_with(String) Value used to fill up missing items",
    "prefix": "|batch"
  },
  "between_times": {
    "body": [
      "|between_times('${1:end}', '${2:unit}')"
    ],
    "description": "Calculates the time between two datetime objects\nParameters:\n- end(String) Datetime object or timestamp at the end of the period\n- unit(String) Which temporal unit to use",
    "prefix": "|between_times"
  },
  "bool": {
    "body": [
      "|bool"
    ],
    "description": "Convert value into a boolean.",
    "prefix": "|bool"
  },
  "capitalize": {
    "body": [
      "|capitalize"
    ],
    "description": "Capitalize a value. The first character will be uppercase, all others lowercase.",
    "prefix": "|capitalize"
  },
  "center": {
    "body": [
      "|center(${1:width})"
    ],
    "description": "Uses whitespace to center the value in a field of a given width.\nParameters:\n- width(number) Width of field to center value in",
    "prefix": "|center"
  },
  "convert_rgb": {
    "body": [
      "|convert_rgb"
    ],
    "description": "Converts a color given as a hex string into a comma-separated list of RGB values.",
    "prefix": "|convert_rgb"
  },
  "count": {
    "body": [
      "|count"
    ],
    "description": "",
    "prefix": "|count"
  },
  "cut": {
    "body": [
      "|cut('${1:to_remove}')"
    ],
    "description": "Removes a string from the value from another string\nParameters:\n- to_remove(String) String to remove from the original string",
    "prefix": "|cut"
  },
  "d": {
    "body": [
      "|d"
    ],
    "description": "",
    "prefix": "|d"
  },
  "date": {
    "body": [
      "|date"
    ],
    "description": "",
    "prefix": "|date"
  },
  "datetimeformat": {
    "body": [
      "|datetimeformat('${1:format}', '${2:timezone}', ${3:locale})"
    ],
    "description": "Formats a date object\nParameters:\n- format(String) The format of the date determined by the directives added to this parameter\n- timezone(String) Time zone of output date\n- locale(string) The language code to use when formatting the datetime",
    "prefix": "|datetimeformat"
  },
  "default": {
    "body": [
      "|default(${1:default_value}, ${2:truthy})"
    ],
    "description": "If the value is undefined it will return the passed default value, otherwise the value of the variable\nParameters:\n- default_value(object) Value to print when variable is not defined\n- truthy(boolean) Set to True to use with variables which evaluate to false",
    "prefix": "|default"
  },
  "dictsort": {
    "body": [
      "|dictsort(${1:case_sensitive}, ${2:by})"
    ],
    "description": "Sort a dict and yield (key, value) pairs.\nParameters:\n- case_sensitive(boolean) Determines whether or not the sorting is case sensitive\n- by(enum key|value) Sort by dict key or value",
    "prefix": "|dictsort"
  },
  "difference": {
    "body": [
      "|difference(${1:list})"
    ],
    "description": "Returns a list containing elements present in the first list but not the second list\nParameters:\n- list(sequence) The second list",
    "prefix": "|difference"
  },
  "divide": {
    "body": [
      "|divide(${1:divisor})"
    ],
    "description": "Divides the current value by a divisor\nParameters:\n- divisor(number) The divisor to divide the value",
    "prefix": "|divide"
  },
  "divisible": {
    "body": [
      "|divisible(${1:divisor})"
    ],
    "description": "Evaluates to true if the value is divisible by the given number\nParameters:\n- divisor(number) The divisor to check if the value is divisible by",
    "prefix": "|divisible"
  },
  "e": {
    "body": [
      "|e"
    ],
    "description": "",
    "prefix": "|e"
  },
  "escape": {
    "body": [
      "|escape"
    ],
    "description": "Converts the characters &, <, >, ‘, and ” in string s to HTML-safe sequences. Use this filter if you need to display text that might contain such characters in HTML. Marks return value as markup string.",
    "prefix": "|escape"
  },
  "escape_attr": {
    "body": [
      "|escape_attr"
    ],
    "description": "Escapes the content of an HTML attribute input",
    "prefix": "|escape_attr"
  },
  "escape_html": {
    "body": [
      "|escape_html"
    ],
    "description": "Escapes the content of an HTML input",
    "prefix": "|escape_html"
  },
  "escape_jinjava": {
    "body": [
      "|escape_jinjava(${1:all_braces})"
    ],
    "description": "Converts the characters { and } in string s to Jinjava-safe sequences. Use this filter if you need to display text that might contain such characters in Jinjava. Marks return value as markup string.\nParameters:\n- all_braces(boolean) Whether to only escape all curly braces or just when there are default expression, tag, or comment marks",
    "prefix": "|escape_jinjava"
  },
  "escape_js": {
    "body": [
      "|escape_js"
    ],
    "description": "Escapes the content of an string input so it can be safely inserted into JavaScript",
    "prefix": "|escape_js"
  },
  "escape_url": {
    "body": [
      "|escape_url"
    ],
    "description": "Escapes the content of a URL input",
    "prefix": "|escape_url"
  },
  "escapejs": {
    "body": [
      "|escapejs"
    ],
    "description": "Escapes strings so that they can be safely inserted into a JavaScript variable declaration",
    "prefix": "|escapejs"
  },
  "escapejson": {
    "body": [
      "|escapejson"
    ],
    "description": "Escapes strings so that they can be used as JSON values",
    "prefix": "|escapejson"
  },
  "filesizeformat": {
    "body": [
      "|filesizeformat(${1:binary})"
    ],
    "description": "Format the value like a ‘human-readable’ file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc).\nParameters:\n- binary(boolean) Use binary prefixes (Mebi, Gibi)",
    "prefix": "|filesizeformat"
  },
  "first": {
    "body": [
      "|first"
    ],
    "description": "Return the first item of a sequence.",
    "prefix": "|first"
  },
  "flatten": {
    "body": [
      "|flatten(${1:list}, ${2:depth})"
    ],
    "description": "Create a new list with all sub-lists recursively added to it up to the specified depth.\nParameters:\n- list(list) The original list.\n- depth(number) The depth level specifying how deep a nested list structure should be flattened. Defaults to 1. Max is 10.",
    "prefix": "|flatten"
  },
  "float": {
    "body": [
      "|float(${1:default})"
    ],
    "description": "Convert the value into a floating point number.\nParameters:\n- default(float) Value to return if conversion fails",
    "prefix": "|float"
  },
  "forceescape": {
    "body": [
      "|forceescape"
    ],
    "description": "Enforce HTML escaping. This will probably double escape variables.",
    "prefix": "|forceescape"
  },
  "format": {
    "body": [
      "|format(${1:args})"
    ],
    "description": "Apply Python string formatting to an object.\nParameters:\n- args(String...) Values to insert into string",
    "prefix": "|format"
  },
  "format_currency": {
    "body": [
      "|format_currency('${1:locale}', '${2:currency code}', '${3:use default decimal digits}', '${4:extend Decimal Digits To Value Precision}')"
    ],
    "description": "Formats a given number as a currency based on the locale and currency code passed in as a parameter. \nParameters:\n- locale(String) Locale in which to format the currency. Any Java locale language tag can be passed as a parameter. The default is the page's locale.Format : ISO639LanguageCodeInLowercase-ISO3166CountryCodeInUppercase\n- currency_code(String) The ISO 4217 code of the currency. The default is the portal's default currency\n- use_default decimal digits(String) A boolean input that determines if formatter needs to use default decimal digits of the currency code. The default is false.\n- extend_Decimal Digits To Value Precision(String) A boolean input that determines if formatter needs to use the number of decimal digits from the given value. If the number of decimal digits from the input value is greater than the default number of decimal digits of the currency, use the number of decimal digits from the input value. Otherwise use the currency's default. The default is false.",
    "prefix": "|format_currency"
  },
  "format_currency_value": {
    "body": [
      "|format_currency_value('${1:locale}', '${2:currency}', ${3:minDecimalDigits}, ${4:maxDecimalDigits})"
    ],
    "description": "Formats a given number as a currency.\nParameters:\n- locale(String) The language tag for the locale to use. Defaults to the page's locale.\nFormat: ISO639LanguageCodeInLowercase-ISO3166CountryCodeInUppercase\n- currency(String) The ISO 4217 code of the currency to use. Defaults to the portal's default currency.\n- minDecimalDigits(integer) The minimum number of decimal digits to use. Defaults to the currency's default number of decimal digits.\n- maxDecimalDigits(integer) The maximum number of decimal digits to use. Defaults to the currency's default number of decimal digits.",
    "prefix": "|format_currency_value"
  },
  "format_date": {
    "body": [
      "|format_date('${1:format}', '${2:timeZone}', '${3:locale}')"
    ],
    "description": "Formats the date component of a date object\nParameters:\n- format(String) The format to use. One of 'short', 'medium', 'long', 'full', or a custom pattern following Unicode LDML\nhttps://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns\n- timeZone(String) Time zone of the output date in IANA TZDB format\nhttps://data.iana.org/time-zones/tzdb/\n- locale(String) The locale to use for locale-aware formats",
    "prefix": "|format_date"
  },
  "format_datetime": {
    "body": [
      "|format_datetime('${1:format}', '${2:timeZone}', '${3:locale}')"
    ],
    "description": "Formats both the date and time components of a date object\nParameters:\n- format(String) The format to use. One of 'short', 'medium', 'long', 'full', or a custom pattern following Unicode LDML\nhttps://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns\n- timeZone(String) Time zone of the output date in IANA TZDB format\nhttps://data.iana.org/time-zones/tzdb/\n- locale(String) The locale to use for locale-aware formats",
    "prefix": "|format_datetime"
  },
  "format_number": {
    "body": [
      "|format_number('${1:locale}', ${2:max decimal precision})"
    ],
    "description": "Formats a given number based on the locale passed in as a parameter.\nParameters:\n- locale(String) Locale in which to format the number. The default is the page's locale.\n- max_decimal precision(number) A number input that determines the decimal precision of the formatted value. If the number of decimal digits from the input value is less than the decimal precision number, use the number of decimal digits from the input value. Otherwise, use the decimal precision number. The default is the number of decimal digits from the input value.",
    "prefix": "|format_number"
  },
  "format_time": {
    "body": [
      "|format_time('${1:format}', '${2:timeZone}', '${3:locale}')"
    ],
    "description": "Formats the time component of a date object\nParameters:\n- format(String) The format to use. One of 'short', 'medium', 'long', 'full', or a custom pattern following Unicode LDML\nhttps://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns\n- timeZone(String) Time zone of the output date in IANA TZDB format\nhttps://data.iana.org/time-zones/tzdb/\n- locale(String) The locale to use for locale-aware formats",
    "prefix": "|format_time"
  },
  "fromjson": {
    "body": [
      "|fromjson"
    ],
    "description": "Converts JSON string to Object",
    "prefix": "|fromjson"
  },
  "fromyaml": {
    "body": [
      "|fromyaml"
    ],
    "description": "Converts a YAML string to an object",
    "prefix": "|fromyaml"
  },
  "geo_distance": {
    "body": [
      "|geo_distance(${1:point1}, ${2:point2_lat}, ${3:point2_long}, ${4:units})"
    ],
    "description": "Calculates the ellipsoidal 2D distance between two points on Earth\nParameters:\n- point1(location) location from a HubDB column\n- point2_lat(number) latitude of point2\n- point2_long(number) longitude of point2\n- units(string) Units for the return value. Options are FT for feet, MI for miles, M for meters or KM for kilometers",
    "prefix": "|geo_distance"
  },
  "groupby": {
    "body": [
      "|groupby('${1:attribute}')"
    ],
    "description": "Group a sequence of objects by a common attribute.\nParameters:\n- attribute(String) The common attribute to group by",
    "prefix": "|groupby"
  },
  "indent": {
    "body": [
      "|indent(${1:width}, ${2:indentfirst})"
    ],
    "description": "Uses whitespace to indent a string.\nParameters:\n- width(number) Amount of whitespace to indent\n- indentfirst(boolean) If True, first line will be indented",
    "prefix": "|indent"
  },
  "int": {
    "body": [
      "|int(${1:default})"
    ],
    "description": "Convert the value into an integer.\nParameters:\n- default(number) Value to return if the conversion fails",
    "prefix": "|int"
  },
  "intersect": {
    "body": [
      "|intersect(${1:list})"
    ],
    "description": "Returns a list containing elements present in both lists\nParameters:\n- list(sequence) The second list",
    "prefix": "|intersect"
  },
  "ipaddr": {
    "body": [
      "|ipaddr(${1:function})"
    ],
    "description": "Evaluates to true if the value is a valid IPv4 or IPv6 address\nParameters:\n- function(string) Name of function. Supported functions: 'prefix', 'netmask', 'network', 'address', 'broadcast'",
    "prefix": "|ipaddr"
  },
  "ipv4": {
    "body": [
      "|ipv4(${1:function})"
    ],
    "description": "Evaluates to true if the value is a valid IPv4 address\nParameters:\n- function(string) Name of function. Supported functions: 'prefix', 'netmask', 'network', 'address', 'broadcast'",
    "prefix": "|ipv4"
  },
  "ipv6": {
    "body": [
      "|ipv6(${1:function})"
    ],
    "description": "Evaluates to true if the value is a valid IPv6 address\nParameters:\n- function(string) Name of function. Supported functions: 'prefix', 'netmask', 'network', 'address', 'broadcast'",
    "prefix": "|ipv6"
  },
  "join": {
    "body": [
      "|join('${1:d}', '${2:attr}')"
    ],
    "description": "Return a string which is the concatenation of the strings in the sequence.\nParameters:\n- d(String) The separator string used to join the items\n- attr(String) Optional dict object attribute to use in joining",
    "prefix": "|join"
  },
  "last": {
    "body": [
      "|last"
    ],
    "description": "Return the last item of a sequence",
    "prefix": "|last"
  },
  "length": {
    "body": [
      "|length"
    ],
    "description": "Return the number of items of a sequence or mapping",
    "prefix": "|length"
  },
  "list": {
    "body": [
      "|list"
    ],
    "description": "Convert the value into a list. If it was a string the returned list will be a list of characters.",
    "prefix": "|list"
  },
  "log": {
    "body": [
      "|log(${1:base})"
    ],
    "description": "Return the natural log of the input.\nParameters:\n- base(number) The base to use for the log calculation",
    "prefix": "|log"
  },
  "lower": {
    "body": [
      "|lower"
    ],
    "description": "Convert a value to lowercase",
    "prefix": "|lower"
  },
  "map": {
    "body": [
      "|map('${1:attribute}')"
    ],
    "description": "Applies a filter on a sequence of objects or looks up an attribute.\nParameters:\n- attribute(String) Filter to apply to an object or dict attribute to lookup",
    "prefix": "|map"
  },
  "md5": {
    "body": [
      "|md5"
    ],
    "description": "Calculates the md5 hash of the given object",
    "prefix": "|md5"
  },
  "minus_time": {
    "body": [
      "|minus_time('${1:diff}', '${2:unit}')"
    ],
    "description": "Subtracts a specified amount of time to a datetime object\nParameters:\n- diff(String) The amount to subtract from the datetime\n- unit(String) Which temporal unit to use",
    "prefix": "|minus_time"
  },
  "multiply": {
    "body": [
      "|multiply(${1:multiplier})"
    ],
    "description": "Multiplies the current object with the given multiplier\nParameters:\n- multiplier(number) The multiplier",
    "prefix": "|multiply"
  },
  "plus_time": {
    "body": [
      "|plus_time('${1:diff}', '${2:unit}')"
    ],
    "description": "Adds a specified amount of time to a datetime object\nParameters:\n- diff(String) The amount to add to the datetime\n- unit(String) Which temporal unit to use",
    "prefix": "|plus_time"
  },
  "pprint": {
    "body": [
      "|pprint"
    ],
    "description": "Pretty print a variable. Useful for debugging.",
    "prefix": "|pprint"
  },
  "random": {
    "body": [
      "|random"
    ],
    "description": "",
    "prefix": "|random"
  },
  "regex_replace": {
    "body": [
      "|regex_replace('${1:regex}', '${2:new}')"
    ],
    "description": "Return a copy of the value with all occurrences of a matched regular expression (Java RE2 syntax) replaced with a new one. The first argument is the regular expression to be matched, the second is the replacement string\nParameters:\n- regex(String) The regular expression that you want to match and replace\n- new(String) The new string that you replace the matched substring",
    "prefix": "|regex_replace"
  },
  "reject": {
    "body": [
      "|reject(${1:exp_test})"
    ],
    "description": "Filters a sequence of objects by applying a test to the object and rejecting the ones with the test succeeding.\nParameters:\n- exp_test(name of expression test) Specify which expression test to run for making the selection",
    "prefix": "|reject"
  },
  "rejectattr": {
    "body": [
      "|rejectattr('${1:attribute}', ${2:exp_test})"
    ],
    "description": "Filters a sequence of objects by applying a test to an attribute of an object or the attribute and rejecting the ones with the test succeeding.\nParameters:\n- attribute(String) Attribute to test for and reject items that contain it\n- exp_test(name of expression test) Specify which expression test to run for making the rejection",
    "prefix": "|rejectattr"
  },
  "render": {
    "body": [
      "|render"
    ],
    "description": "Renders a template string early to be used by other filters and functions",
    "prefix": "|render"
  },
  "replace": {
    "body": [
      "|replace('${1:old}', '${2:new}', ${3:count})"
    ],
    "description": "Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced\nParameters:\n- old(String) The old substring that you want to match and replace\n- new(String) The new string that you replace the matched substring\n- count(number) Replace only the first N occurrences",
    "prefix": "|replace"
  },
  "reverse": {
    "body": [
      "|reverse"
    ],
    "description": "Reverse the object or return an iterator the iterates over it the other way round.",
    "prefix": "|reverse"
  },
  "root": {
    "body": [
      "|root(${1:root})"
    ],
    "description": "Return the square root of the input.\nParameters:\n- root(number) The nth root to use for the calculation",
    "prefix": "|root"
  },
  "round": {
    "body": [
      "|round(${1:precision}, ${2:method})"
    ],
    "description": "Round the number to a given precision.\nParameters:\n- precision(number) Specifies the precision of rounding\n- method(enum common|ceil|floor) Method of rounding: 'common' rounds either up or down, 'ceil' always rounds up, and 'floor' always rounds down.",
    "prefix": "|round"
  },
  "safe": {
    "body": [
      "|safe"
    ],
    "description": "Mark the value as safe, which means that in an environment with automatic escaping enabled this variable will not be escaped.",
    "prefix": "|safe"
  },
  "sanitize_html": {
    "body": [
      "|sanitize_html"
    ],
    "description": "Sanitizes the content of an HTML input",
    "prefix": "|sanitize_html"
  },
  "select": {
    "body": [
      "|select(${1:exp_test})"
    ],
    "description": "Filters a sequence of objects by applying a test to the object and only selecting the ones with the test succeeding.\nParameters:\n- exp_test(name of expression test) Specify which expression test to run for making the selection",
    "prefix": "|select"
  },
  "selectattr": {
    "body": [
      "|selectattr('${1:attr}', ${2:exp_test})"
    ],
    "description": "Filters a sequence of objects by applying a test to an attribute of an object and only selecting the ones with the test succeeding.\nParameters:\n- attr(String) Attribute to test for and select items that contain it\n- exp_test(name of expression test) Specify which expression test to run for making the selection",
    "prefix": "|selectattr"
  },
  "shuffle": {
    "body": [
      "|shuffle"
    ],
    "description": "",
    "prefix": "|shuffle"
  },
  "slice": {
    "body": [
      "|slice(${1:slices}, ${2:fillWith})"
    ],
    "description": "Slice an iterator and return a list of lists containing those items.\nParameters:\n- slices(number) Specifies how many items will be sliced. Maximum value is 1000. \n- fillWith(object) Specifies which object to use to fill missing values on final iteration",
    "prefix": "|slice"
  },
  "sort": {
    "body": [
      "|sort(${1:reverse}, ${2:case_sensitive}, '${3:attribute}')"
    ],
    "description": "Sort an iterable.\nParameters:\n- reverse(boolean) Boolean to reverse the sort order\n- case_sensitive(boolean) Determines whether or not the sorting is case sensitive\n- attribute(String) Specifies an attribute to sort by",
    "prefix": "|sort"
  },
  "split": {
    "body": [
      "|split('${1:separator}', ${2:limit})"
    ],
    "description": "Splits the input string into a list on the given separator\nParameters:\n- separator(String) Specifies the separator to split the variable by\n- limit(number) Limits resulting list by putting remainder of string into last list item",
    "prefix": "|split"
  },
  "string": {
    "body": [
      "|string"
    ],
    "description": "Returns string value of object",
    "prefix": "|string"
  },
  "striptags": {
    "body": [
      "|striptags"
    ],
    "description": "Strip SGML/XML tags and replace adjacent whitespace by one space.",
    "prefix": "|striptags"
  },
  "strtodate": {
    "body": [
      "|strtodate('${1:dateFormat}')"
    ],
    "description": "Converts a date string and date format to a date object\nParameters:\n- dateFormat(String) Format of the date string",
    "prefix": "|strtodate"
  },
  "strtotime": {
    "body": [
      "|strtotime('${1:datetimeFormat}')"
    ],
    "description": "Converts a datetime string and datetime format to a datetime object\nParameters:\n- datetimeFormat(String) Format of the datetime string",
    "prefix": "|strtotime"
  },
  "sum": {
    "body": [
      "|sum(${1:start}, '${2:attribute}')"
    ],
    "description": "Returns the sum of a sequence of numbers plus the value of parameter ‘start’ (which defaults to 0). When the sequence is empty it returns start.\nParameters:\n- start(number) Sets a value to return, if there is nothing in the variable to sum\n- attribute(String) Specify an optional attribute of dict to sum",
    "prefix": "|sum"
  },
  "symmetric_difference": {
    "body": [
      "|symmetric_difference(${1:list})"
    ],
    "description": "Returns a list containing elements present in only one list.\nParameters:\n- list(sequence) The second list",
    "prefix": "|symmetric_difference"
  },
  "title": {
    "body": [
      "|title"
    ],
    "description": "Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.",
    "prefix": "|title"
  },
  "tojson": {
    "body": [
      "|tojson"
    ],
    "description": "Writes object as a JSON string",
    "prefix": "|tojson"
  },
  "toyaml": {
    "body": [
      "|toyaml"
    ],
    "description": "Writes object as a YAML string",
    "prefix": "|toyaml"
  },
  "trim": {
    "body": [
      "|trim"
    ],
    "description": "Strip leading and trailing whitespace.",
    "prefix": "|trim"
  },
  "truncate": {
    "body": [
      "|truncate(${1:length}, ${2:killwords}, '${3:end}')"
    ],
    "description": "Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255. If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign (\"...\"). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter.\nParameters:\n- length(number) Specifies the length at which to truncate the text (includes HTML characters)\n- killwords(boolean) If true, the string will cut text at length\n- end(String) The characters that will be added to indicate where the text was truncated",
    "prefix": "|truncate"
  },
  "truncatehtml": {
    "body": [
      "|truncatehtml(${1:length}, '${2:end}', ${3:breakword})"
    ],
    "description": "Truncates a given string, respecting html markup (i.e. will properly close all nested tags)\nParameters:\n- length(number) Length at which to truncate text (HTML characters not included)\n- end(String) The characters that will be added to indicate where the text was truncated\n- breakword(boolean) If set to true, text will be truncated in the middle of words",
    "prefix": "|truncatehtml"
  },
  "unescape_html": {
    "body": [
      "|unescape_html"
    ],
    "description": "Converts HTML entities in string s to Unicode characters.",
    "prefix": "|unescape_html"
  },
  "union": {
    "body": [
      "|union(${1:list})"
    ],
    "description": "Returns a list containing elements present in either list\nParameters:\n- list(sequence) The second list",
    "prefix": "|union"
  },
  "unique": {
    "body": [
      "|unique(${1:attr})"
    ],
    "description": "Extract a unique set from a sequence of objects\nParameters:\n- attr(Optional attribute on object to use as unique identifier) ",
    "prefix": "|unique"
  },
  "unixtimestamp": {
    "body": [
      "|unixtimestamp"
    ],
    "description": "",
    "prefix": "|unixtimestamp"
  },
  "upper": {
    "body": [
      "|upper"
    ],
    "description": "Convert a value to uppercase",
    "prefix": "|upper"
  },
  "urldecode": {
    "body": [
      "|urldecode"
    ],
    "description": "Decodes encoded URL strings back to the original URL. It accepts both dictionaries and regular strings as well as pairwise iterables.",
    "prefix": "|urldecode"
  },
  "urlencode": {
    "body": [
      "|urlencode"
    ],
    "description": "Escape strings for use in URLs (uses UTF-8 encoding). It accepts both dictionaries and regular strings as well as pairwise iterables.",
    "prefix": "|urlencode"
  },
  "urlize": {
    "body": [
      "|urlize(${1:trim_url_limit}, ${2:nofollow}, '${3:target}')"
    ],
    "description": "Converts URLs in plain text into clickable links.\nParameters:\n- trim_url_limit(number) Sets a character limit\n- nofollow(boolean) Adds nofollow to generated link tag\n- target(String) Adds target attr to generated link tag",
    "prefix": "|urlize"
  },
  "wordcount": {
    "body": [
      "|wordcount"
    ],
    "description": "Counts the words in the given string",
    "prefix": "|wordcount"
  },
  "wordwrap": {
    "body": [
      "|wordwrap(${1:width}, ${2:break_long_words})"
    ],
    "description": "Return a copy of the string passed to the filter wrapped after 79 characters.\nParameters:\n- width(number) Sets the width of spaces at which to wrap the text\n- break_long_words(boolean) If true, long words will be broken when wrapped",
    "prefix": "|wordwrap"
  },
  "xmlattr": {
    "body": [
      "|xmlattr(${1:autospace})"
    ],
    "description": "Create an HTML/XML attribute string based on the items in a dict.\nParameters:\n- autospace(boolean) Automatically prepend a space in front of the item",
    "prefix": "|xmlattr"
  }
}
