{
  "blog_all_posts_url": {
    "body": [
      "blog_all_posts_url(${1:selected_blog})"
    ],
    "description": "Returns a full URL to the listing page for all blog posts for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use",
    "prefix": "~blog_all_posts_url"
  },
  "blog_author_url": {
    "body": [
      "blog_author_url(${1:selected_blog}, ${2:author_slug})"
    ],
    "description": "Returns a full URL to the specified author's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to link to",
    "prefix": "~blog_author_url"
  },
  "blog_authors": {
    "body": [
      "blog_authors(${1:selected_blog}, ${2:limit})"
    ],
    "description": "Returns a sequence of blog author objects for the specified blog, sorted by slug ascending\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max authors to return",
    "prefix": "~blog_authors"
  },
  "blog_by_id": {
    "body": [
      "blog_by_id(${1:id})"
    ],
    "description": "Returns a Blog by id or the default Blog\nParameters:\n- id(id or 'default') The id of the blog to look up or 'default'",
    "prefix": "~blog_by_id"
  },
  "blog_page_link": {
    "body": [
      "blog_page_link(${1:page})"
    ],
    "description": "Returns the absolute url of the specified paginated listing page for the current blog\nParameters:\n- page(number) Required page number used to generate url",
    "prefix": "~blog_page_link"
  },
  "blog_popular_posts": {
    "body": [
      "blog_popular_posts(${1:selected_blog}, ${2:limit}, ${3:tag_slug}, ${4:time_frame}, ${5:logical_operator})"
    ],
    "description": "Returns a sequence of blog post objects for the specified blog, sorted by most popular first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence up to a limit of 200\n- tag_slug(list) Optional list of tags to filter posts by\n- time_frame(choice) Optional timeframe to filter posts by (must be one of 'popular_all_time', 'popular_past_year', 'popular_past_six_months', 'popular_past_month')\n- logical_operator(string) Logical operator which, when tag_slug is a list, specifies how to logically filter on the slugs. Must be one of 'AND', 'OR'",
    "prefix": "~blog_popular_posts"
  },
  "blog_post_archive_url": {
    "body": [
      "blog_post_archive_url(${1:selected_blog}, ${2:year}, ${3:month}, ${4:day})"
    ],
    "description": "Returns a full URL to the archive listing page for the given date values on the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- year(number) The year\n- month(number) The optional month\n- day(number) The optional day",
    "prefix": "~blog_post_archive_url"
  },
  "blog_post_by_id": {
    "body": [
      "blog_post_by_id(${1:blog_post_id})"
    ],
    "description": "Returns a blog post by id\nParameters:\n- blog_post_id(id) The id of the blog post to look up",
    "prefix": "~blog_post_by_id"
  },
  "blog_recent_author_posts": {
    "body": [
      "blog_recent_author_posts(${1:selected_blog}, ${2:author_slug}, ${3:limit})"
    ],
    "description": "Returns a sequence of blog post objects for the specified blog, by the specified author, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- author_slug(author slug) Specifies which author to filter on\n- limit(number) Specifies the number of posts to add to the sequence up to a limit of 200",
    "prefix": "~blog_recent_author_posts"
  },
  "blog_recent_posts": {
    "body": [
      "blog_recent_posts(${1:selected_blog}, ${2:limit})"
    ],
    "description": "Returns a sequence of blog post objects for the specified blog, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(number) Specifies the number of posts to add to the sequence, maximum 200.",
    "prefix": "~blog_recent_posts"
  },
  "blog_recent_tag_posts": {
    "body": [
      "blog_recent_tag_posts(${1:selected_blog}, ${2:tag_slug}, ${3:limit}, ${4:logical_operator})"
    ],
    "description": "Returns a sequence of blog post objects for the specified blog, for the specified tag, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to filter on\n- limit(number) Specifies the number of posts to add to the sequence\n- logical_operator(string) Logical operator which, when tag_slug is a list, specifies how to logically filter on the slugs. Must be one of 'AND', 'OR'",
    "prefix": "~blog_recent_tag_posts"
  },
  "blog_recent_topic_posts": {
    "body": [
      "blog_recent_topic_posts(${1:selected_blog}, ${2:topic_slug}, ${3:limit})"
    ],
    "description": "DEPRECATED -- see 'blog_recent_tag_posts'\nReturns a sequence of blog post objects for the specified blog, for the specified topic, sorted by most recent first\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- topic_slug(topic slug) Specifies which topic to filter on\n- limit(number) Specifies the number of posts to add to the sequence",
    "prefix": "~blog_recent_topic_posts"
  },
  "blog_tag_url": {
    "body": [
      "blog_tag_url(${1:selected_blog}, ${2:tag_slug})"
    ],
    "description": "Returns a full URL to the specified tag's listing page for the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- tag_slug(tag slug) Specifies which tag to link to",
    "prefix": "~blog_tag_url"
  },
  "blog_tags": {
    "body": [
      "blog_tags(${1:selected_blog}, ${2:limit})"
    ],
    "description": "Returns a sequence of the 250 most blogged-about tags (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max tags to return",
    "prefix": "~blog_tags"
  },
  "blog_topics": {
    "body": [
      "blog_topics(${1:selected_blog}, ${2:limit})"
    ],
    "description": "DEPRECATED -- see 'blog_tags'\nReturns a sequence of the 250 most blogged-about topics (based on number of associated blog posts) for the specified blog, sorted by blog post count\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to use\n- limit(numeric) Max topics to return",
    "prefix": "~blog_topics"
  },
  "blog_total_post_count": {
    "body": [
      "blog_total_post_count(${1:selected_blog})"
    ],
    "description": "Returns the total number of published posts in the specified blog\nParameters:\n- selected_blog(blog id or 'default') Specifies which blog to count",
    "prefix": "~blog_total_post_count"
  },
  "color_contrast": {
    "body": [
      "color_contrast(${1:string}, ${2:string}, ${3:string})"
    ],
    "description": "Returns true or false based on wheater or not given color combination passes the WCAG standard provided\nParameters:\n- string(string) color code in a hex or rgb format\n- string(string) color code in a hex or rgb format\n- string(string) WCAG rating ('AA' or 'AAA') for A11y",
    "prefix": "~color_contrast"
  },
  "color_variant": {
    "body": [
      "color_variant(${1:base_color}, ${2:brightness_offset})"
    ],
    "description": "Calculates a new hex color value based on a given input string var and multiplier\nParameters:\n- base_color(hex color string (i.e. #fefefe)) The starting color to be altered\n- brightness_offset(number) A positive or negative number used to lighten or darken the base color",
    "prefix": "~color_variant"
  },
  "content_by_id": {
    "body": [
      "content_by_id(${1:id})"
    ],
    "description": "Returns a landing page, website page or blog post by id\nParameters:\n- id(id) The id of the content to look up",
    "prefix": "~content_by_id"
  },
  "content_by_ids": {
    "body": [
      "content_by_ids(${1:ids})"
    ],
    "description": "Given a list of content ids, returns a dict of landing page, website page or blog posts matching those ids\nParameters:\n- ids(list) A list of page or blog post ids to look up. Up to 100 content objects can be passed.",
    "prefix": "~content_by_ids"
  },
  "crm_associations": {
    "body": [
      "crm_associations(${1:id}, ${2:association category}, ${3:association definition id}, ${4:query}, ${5:properties}, ${6:formatting})"
    ],
    "description": "Gets a list of associated objects from the HubSpot CRM based on the given object id, association category, and association definition id.Supported object types that can be retrieved are HubSpot built-in objects, portal specific objects, and integrator objects. For security, only portal specific objects and product can be retrieved on any public page. Any other built-in object types (except product) or integrator object types must be hosted on a page which is either password protected or requires a CMS Membership login. Objects are returned as a dict of properties and values.\nParameters:\n- id(id) The id of object instance to retrieve the associations from.\n- association_category(enumeration) The category of the association definition. Possible values are HUBSPOT_DEFINED, USER_DEFINED, and INTEGRATOR_DEFINED.\n- association_definition id(number) The id of the association definition to use. Hubspot-defined association definition ids for the built-in object types can be found here https://legacydocs.hubspot.com/docs/methods/crm-associations/crm-associations-overview or you can use the API endpoint `/crm/v3/associations/{fromObjectType}/{toObjectType}/types` documented at https://developers.hubspot.com/docs/api/crm/associations\n- query(string) Optional. Http Query Language(HQL) query to filter associated objects. The query can be formed with property expressions ANDed together using the & symbol. The supported expression operators are eq (default), neq, lt, lte, gt, gte, is_null, not_null, in, not_in, and contains(contains is only applicable for multi-valued properties). E.g. for an event \"type=sports&date_gt=2020-06-01\". If you want to filter by a property which has any of the given set of values, use `in` filter (e.g. type__in=sports,music). If you want to filter by a multi-select property which has all of the given values, use `contains` filter (e.g type__contains=sports,music). If a query is provided, the function will run the default query `offset=0&limit=10` to fetch the objects.\n- properties(string) Optional. The list of property names that should be retrieved. If list is not provided then the properties defined as required are returned and all the properties will be returned if required properties is not defined. The object instance id is always included in the returned object properties even if it is not explicitly added in the property list.\n- formatting(boolean) Optional. Format values such as dates and currency according to this portal's settings. Pass 'false' for raw strings.",
    "prefix": "~crm_associations"
  },
  "crm_object": {
    "body": [
      "crm_object(${1:object type}, ${2:query or object instance id}, ${3:properties}, ${4:formatting})"
    ],
    "description": "Gets a single object from the HubSpot CRM by query or by instance id.Supported object types are HubSpot built-in objects, portal specific objects, and integrator objects.For security, only portal specific objects and product can be retrieved on any public page. Any other built-in object types (except product) or integrator object types must be hosted on a page which is either password protected or requires a CMS Membership login. Objects are returned as a dict of properties and values.\nParameters:\n- object_type(string) The object type name e.g. 'contact', 'product', 'house_listing', 'publication', 'store_location'. For integrator object types the fully qualified name (FQN) should be used that is the type name prefixed by the app id, e.g. a34343_shipment. The only other case that the FQN should be used is when a portal specific custom object type has the same name as a HubSpot built-in object type, e.g. if a portal specific 'product' object type is needed then the FQN should be used instead of the simple type name like: p129292_contact (the number after the prefix 'p' is the portal id). Since the FQN of portal specific type carries the portal id, It is advised to avoid using the FQN for portal specific types to make the code portable across portals. Object type names are case sensitive except for built-in object types provided by HubSpot, e.g. 'CONTACT' and 'contact' refer to the same object type but 'House_Listing' is different than 'house_listing'\n- query_or object instance id(string) The id of object instance to retrieve. Alternatively a Http Query Language(HQL) query with object type property expressions ANDed together using the & symbol. The supported expression operators are eq (default), neq, lt, lte, gt, gte, is_null, not_null, in, not_in, and contains(contains is only applicable for multi-valued properties). E.g. for an event \"type=sports&date_gt=2020-06-01\". If you want to filter by a property which has any of the given set of values, use `in` filter (e.g. type__in=sports,music).  If you want to filter by a multi-select property which has all of the given values, use `contains` filter (e.g type__contains=sports,music).\n- properties(string) Optional. The list of property names that should be retrieved. If list is not provided then the properties defined as required are returned. if no required properties have been defined all the properties will be returned. The object instance id is always included in the returned object properties even if it is not explicitly added in the property list.\n- formatting(boolean) Optional. Format values such as dates and currency according to this portal's settings. Pass 'false' for raw strings.",
    "prefix": "~crm_object"
  },
  "crm_objects": {
    "body": [
      "crm_objects(${1:object type}, ${2:query or list of object ids}, ${3:properties}, ${4:formatting})"
    ],
    "description": "Gets a list of object from the HubSpot CRM by query or by list of ids. For security, only product objects can be retrieved on any public page. Supported object types are HubSpot built-in objects, portal specific objects, and integrator objects.For security, only portal specific objects and product can be retrieved on any public page. Any other built-in object types (except product) or integrator object types must be hosted on a page which is either password protected or requires a CMS Membership login. Objects are returned as a list of dict of properties and values.To page through results, use limit and offset parameters on the query like limit=10&offset=20\nParameters:\n- object_type(string) The object type name e.g. 'contact', 'product', 'house_listing', 'publication', 'store_location'. For integrator object types the fully qualified name (FQN) should be used that is the type name prefixed by the app id, e.g. a34343_shipment. The only other case that the FQN should be used is when a portal specific custom object type has the same name as a HubSpot built-in object type, e.g. if a portal specific 'product' object type is needed then the FQN should be used instead of the simple type name like: p129292_contact (the number after the prefix 'p' is the portal id). Since the FQN of portal specific type carries the portal id, It is advised to avoid using the FQN for portal specific types to make the code portable across portals. Object type names are case sensitive except for built-in object types provided by HubSpot, e.g. 'CONTACT' and 'contact' refer to the same object type but 'House_Listing' is different than 'house_listing'\n- query_or list of object ids(string | list) Optional. The list of object instance ids to retrieve. Alternatively a Http Query Language(HQL) query with object type property expressions ANDed together using the & symbol. The supported expression operators are eq (default), neq, lt, lte, gt, gte, is_null, not_null, in, not_in, and contains(contains is only applicable for multi-valued properties). E.g. for an event \"type=sports&date_gt=2020-06-01\". If you want to filter by a property which has any of the given set of values, use `in` filter (e.g. type__in=sports,music). If you want to filter by a multi-select property which has all of the given values, use `contains` filter (e.g type__contains=sports,music). If neither a list of object instance ids nor a query is provided, the function will run the default query `offset=0&limit=10` to fetch the objects.\n- properties(string) Optional. The list of property names that should be retrieved. If list is not provided then the properties defined as required are returned and all the properties will be returned if required properties is not defined. The object instance id is always included in the returned object properties even if it is not explicitly added in the property list.\n- formatting(boolean) Optional. Format values such as dates and currency according to this portal's settings. Pass 'false' for raw strings.",
    "prefix": "~crm_objects"
  },
  "crm_property_definition": {
    "body": [
      "crm_property_definition(${1:object type}, ${2:property name})"
    ],
    "description": "Gets the property definition for a given object type and property name. Supported object types are HubSpot built-in objects, portal specific objects, and integrator objects.For security, only portal specific objects and product can be retrieved on any public page. Any other built-in object types (except product) or integrator object types must be hosted on a page which is either password protected or requires a CMS Membership login. \nParameters:\n- object_type(string) The object type name e.g. 'contact', 'product', 'house_listing', 'publication', 'store_location'. For integrator object types the fully qualified name (FQN) should be used that is the type name prefixed by the app id, e.g. a34343_shipment. The only other case that the FQN should be used is when a portal specific custom object type has the same name as a HubSpot built-in object type, e.g. if a portal specific 'product' object type is needed then the FQN should be used instead of the simple type name like: p129292_contact (the number after the prefix 'p' is the portal id). Since the FQN of portal specific type carries the portal id, It is advised to avoid using the FQN for portal specific types to make the code portable across portals. Object type names are case sensitive except for built-in object types provided by HubSpot, e.g. 'CONTACT' and 'contact' refer to the same object type but 'House_Listing' is different than 'house_listing'\n- property_name(string) The case-insensitive property name to retrieve the definition for. ",
    "prefix": "~crm_property_definition"
  },
  "crm_property_definitions": {
    "body": [
      "crm_property_definitions(${1:object type}, ${2:property name})"
    ],
    "description": "Gets the property definitions for a given object type and set of property names. Supported object types are HubSpot built-in objects, portal specific objects, and integrator objects.For security, only portal specific objects and product can be retrieved on any public page. Any other built-in object types (except product) or integrator object types must be hosted on a page which is either password protected or requires a CMS Membership login. \nParameters:\n- object_type(string) The object type name e.g. 'contact', 'product', 'house_listing', 'publication', 'store_location'. For integrator object types the fully qualified name (FQN) should be used that is the type name prefixed by the app id, e.g. a34343_shipment. The only other case that the FQN should be used is when a portal specific custom object type has the same name as a HubSpot built-in object type, e.g. if a portal specific 'product' object type is needed then the FQN should be used instead of the simple type name like: p129292_contact (the number after the prefix 'p' is the portal id). Since the FQN of portal specific type carries the portal id, It is advised to avoid using the FQN for portal specific types to make the code portable across portals. Object type names are case sensitive except for built-in object types provided by HubSpot, e.g. 'CONTACT' and 'contact' refer to the same object type but 'House_Listing' is different than 'house_listing'\n- property_name(string) Optional. The case-insensitive property names to retrieve the definition for. If empty, the definitions for all the properties will be retrieved.",
    "prefix": "~crm_property_definitions"
  },
  "cta": {
    "body": [
      "cta('${1:guid}', ${2:align_opt})"
    ],
    "description": "Renders a call to action embed tag\nParameters:\n- guid(String) The ID of the CTA to render\n- align_opt(enum justifyleft|justifycenter|justifyright|justifyfull) Adjusts alignment of CTA",
    "prefix": "~cta"
  },
  "data_token": {
    "body": [
      "data_token(${1:expression}, ${2:default}, ${3:options})"
    ],
    "description": "Returns the value of any data in the context.\nParameters:\n- expression(string) An expression for the object and property to render\n- default(string) (Optional) A default value to use if the expression has no value\n- options(dict) (Optional) Options for rendering data token",
    "prefix": "~data_token"
  },
  "datetimeformat": {
    "body": [
      "datetimeformat(${1:var}, '${2:format}', '${3:timezone}')"
    ],
    "description": "formats a date to a string\nParameters:\n- var(date) \n- format(String) \n- timezone(String) Time zone of output date",
    "prefix": "~datetimeformat"
  },
  "display_call_to_action": {
    "body": [
      "display_call_to_action(${1:id})"
    ],
    "description": "Returns the JS needed to display a call to action\nParameters:\n- id(id) The id of the call to action to look up",
    "prefix": "~display_call_to_action"
  },
  "facebook_messenger_link": {
    "body": [
      "facebook_messenger_link()"
    ],
    "description": "Returns an m.me link for facebook messenger",
    "prefix": "~facebook_messenger_link"
  },
  "file_by_id": {
    "body": [
      "file_by_id(${1:file_id})"
    ],
    "description": "Returns the metadata of a file by ID\nParameters:\n- file_id(id) The ID of the file to look up",
    "prefix": "~file_by_id"
  },
  "files_by_ids": {
    "body": [
      "files_by_ids(${1:file_ids})"
    ],
    "description": "Returns the metadata of a list of files by ID\nParameters:\n- file_ids(list) The list of file ids to look up.",
    "prefix": "~files_by_ids"
  },
  "flag_content_for_access_check": {
    "body": [
      "flag_content_for_access_check(${1:id})"
    ],
    "description": "Marks content id for later access check and creates field hs-member-content-access\nParameters:\n- id(id) The id of the content to check access for the logged in member",
    "prefix": "~flag_content_for_access_check"
  },
  "follow_me_links": {
    "body": [
      "follow_me_links()"
    ],
    "description": "Returns a list of configured follow me links for the portal",
    "prefix": "~follow_me_links"
  },
  "footer_js": {
    "body": [
      "footer_js()"
    ],
    "description": "Outputs all javascript enqueued for the head as html",
    "prefix": "~footer_js"
  },
  "format_address": {
    "body": [
      "format_address('${1:locale}', '${2:fullAddress}')"
    ],
    "description": "Formats an address based on locale\nParameters:\n- locale(String) \n- fullAddress(String) fullAddress object, {address: string, address2: string, city: string, state: string country: string zip: string} Address, city, state, country and zip are required. Address2 is an optional field.",
    "prefix": "~format_address"
  },
  "format_company_name": {
    "body": [
      "format_company_name('${1:name}', ${2:useHonorificIfApplicable})"
    ],
    "description": "Formats a company's name by adding Japanese honorifics where appropriate\nParameters:\n- name(String) Name of the company\n- useHonorificIfApplicable(boolean) When this is set to true and the context's language is in Japanese, this will add a Japanese company honorific where appropriate",
    "prefix": "~format_company_name"
  },
  "format_date": {
    "body": [
      "format_date()"
    ],
    "description": "",
    "prefix": "~format_date"
  },
  "format_datetime": {
    "body": [
      "format_datetime()"
    ],
    "description": "",
    "prefix": "~format_datetime"
  },
  "format_name": {
    "body": [
      "format_name('${1:firstName}', '${2:surname}', ${3:useHonorificIfApplicable})"
    ],
    "description": "Formats a person's name by putting the surname before the first name and adds Japanese honorifics where appropriate\nParameters:\n- firstName(String) Person's first name\n- surname(String) Person's surname or last name\n- useHonorificIfApplicable(boolean) When this is set to true and the context's language is in Japanese, this will add a Japanese customer honorific where appropriate",
    "prefix": "~format_name"
  },
  "format_time": {
    "body": [
      "format_time()"
    ],
    "description": "",
    "prefix": "~format_time"
  },
  "geo_distance": {
    "body": [
      "geo_distance(${1:point1}, ${2:point2_lat}, ${3:point2_long}, ${4:units})"
    ],
    "description": "Calculates the ellipsoidal 2D distance between two points on Earth\nParameters:\n- point1(location) location from a HubDB column\n- point2_lat(number) latitude of point2\n- point2_long(number) longitude of point2\n- units(string) Units for the return value. Options are FT for feet, MI for miles, M for meters or KM for kilometers",
    "prefix": "~geo_distance"
  },
  "get_asset_url": {
    "body": [
      "get_asset_url('${1:path}')"
    ],
    "description": "Returns URL to specified asset by given path\nParameters:\n- path(String) The Design Manager file path to the template or file",
    "prefix": "~get_asset_url"
  },
  "get_asset_version": {
    "body": [
      "get_asset_version()"
    ],
    "description": "",
    "prefix": "~get_asset_version"
  },
  "get_module_breakpoint_styles": {
    "body": [
      "get_module_breakpoint_styles()"
    ],
    "description": "Generates mapping between breakpoint names to an object with media query and breakpoint styles",
    "prefix": "~get_module_breakpoint_styles"
  },
  "get_public_template_url": {
    "body": [
      "get_public_template_url()"
    ],
    "description": "Returns URL to specified template by given path",
    "prefix": "~get_public_template_url"
  },
  "get_public_template_url_by_id": {
    "body": [
      "get_public_template_url_by_id(${1:template_id})"
    ],
    "description": "Returns URL to specified template by id\nParameters:\n- template_id(number) The ID number of the template of file",
    "prefix": "~get_public_template_url_by_id"
  },
  "get_rss_url": {
    "body": [
      "get_rss_url(${1:attributes})"
    ],
    "description": "Returns a URL for a specified RSS listing\nParameters:\n- attributes(dict) Dictionary of parameters corresponding to most parameters of the rss listing tag. Supports 'show_date'(true/false), 'show_author'(true/false), 'show_detail'(true/false), 'limit_to_chars'(Number), 'publish_date_format'('short'/'medium'/'long' or a custom format such as \"MMMM d, yyyy 'at' h:mm a\"), 'click_through_text'(String), 'include_featured_image'(true/false), 'is_external'(true/false), 'number_of_items'(Number), 'publish_date_language'(String), 'rss_url'(String), 'content_group_id (Number)', 'select_blog'(String), and 'tag_id'(Number)",
    "prefix": "~get_rss_url"
  },
  "get_theme_breakpoint_styles": {
    "body": [
      "get_theme_breakpoint_styles()"
    ],
    "description": "Generates mapping between breakpoint names to an object with media query and breakpoint styles",
    "prefix": "~get_theme_breakpoint_styles"
  },
  "head_css": {
    "body": [
      "head_css()"
    ],
    "description": "Outputs all loaded css as html",
    "prefix": "~head_css"
  },
  "head_elements": {
    "body": [
      "head_elements()"
    ],
    "description": "Outputs all additional elements for the head as html",
    "prefix": "~head_elements"
  },
  "head_js": {
    "body": [
      "head_js()"
    ],
    "description": "Outputs all javascript enqueued for the head as html",
    "prefix": "~head_js"
  },
  "hubdb_table": {
    "body": [
      "hubdb_table(${1:table_id})"
    ],
    "description": "Returns information about a table\nParameters:\n- table_id(string) id or name of the table",
    "prefix": "~hubdb_table"
  },
  "hubdb_table_column": {
    "body": [
      "hubdb_table_column(${1:table_id}, '${2:column}')"
    ],
    "description": "Returns column information for specific column in a table\nParameters:\n- table_id(string) id or name of the table\n- column(String) id or name of the column",
    "prefix": "~hubdb_table_column"
  },
  "hubdb_table_row": {
    "body": [
      "hubdb_table_row(${1:table_id}, ${2:row_id})"
    ],
    "description": "Returns a row from a table by id\nParameters:\n- table_id(string) id or name of the table\n- row_id(number) id of the row of the table",
    "prefix": "~hubdb_table_row"
  },
  "hubdb_table_rows": {
    "body": [
      "hubdb_table_rows(${1:table_id}, ${2:query})"
    ],
    "description": "Returns a list of HubDB rows based on the query\nParameters:\n- table_id(string) id or name of the table to query\n- query(string) A query such in the same format as a URL query string. If not passed, returns all rows.",
    "prefix": "~hubdb_table_rows"
  },
  "i18n_getlanguage": {
    "body": [
      "i18n_getlanguage()"
    ],
    "description": "Gets the language of the current page. Currently works only within modules.",
    "prefix": "~i18n_getlanguage"
  },
  "i18n_getmessage": {
    "body": [
      "i18n_getmessage('${1:message_name}', ${2:substitutions})"
    ],
    "description": "Gets the translated message for the language of the rendered page. Currently works only within modules.\nParameters:\n- message_name(String) The name of the message to look up\n- substitutions(sequence of strings) numbered substitution values used in placeholder 'content' attributes",
    "prefix": "~i18n_getmessage"
  },
  "include_css": {
    "body": [
      "include_css('${1:path}')"
    ],
    "description": "Generates stylesheet link tag for specified template path\nParameters:\n- path(String) The Design Manager file path to the template or file",
    "prefix": "~include_css"
  },
  "include_custom_fonts": {
    "body": [
      "include_custom_fonts()"
    ],
    "description": "",
    "prefix": "~include_custom_fonts"
  },
  "include_javascript": {
    "body": [
      "include_javascript('${1:path}')"
    ],
    "description": "Generates script include tag for specified template path\nParameters:\n- path(String) ",
    "prefix": "~include_javascript"
  },
  "load_translations": {
    "body": [
      "load_translations(${1:path}, ${2:language_code}, ${3:language_code_fallback})"
    ],
    "description": "Loads translations for a given path and returns a map of the values\nParameters:\n- path(string) The Design Manager file path to the _locales directory of the translations\n- language_code(string) The language code\n- language_code_fallback(string) The language code fallback if original is not present",
    "prefix": "~load_translations"
  },
  "locale_name": {
    "body": [
      "locale_name(${1:language_code}, ${2:target_language_code})"
    ],
    "description": "Returns a human-readable string representation of a language code (optionally translated to a target language)\nParameters:\n- language_code(string) The language code\n- target_language_code(string) The language that the output will be translated to",
    "prefix": "~locale_name"
  },
  "menu": {
    "body": [
      "menu(${1:menu_id or menu_name}, ${2:root_type}, ${3:root_key})"
    ],
    "description": "Returns the the nested link structure of an advanced menu.\nParameters:\n- menu_id_or menu_name(number or string) The id or name of the menu passed as a number or string.\n- root_type(enum) root type of the menu (\"site_root\", \"top_parent\", \"parent\", \"page_name\", \"page_id\", \"breadcrumb\").\"site_root\" denotes static - Always show top-level pages in menu.\"top_parent\" denotes dynamic by section - Show pages in menu that are related to section being viewed.\"parent\" denotes dynamic by page - Show pages in menu that are related to page being viewed.\"breadcrumb\" denotes breadcrumb style path menu (uses horizontal flow).\n- root_key(string) root key (id or name) when using \"page_name\" or \"page_id\"",
    "prefix": "~menu"
  },
  "module_asset_url": {
    "body": [
      "module_asset_url('${1:name}')"
    ],
    "description": "Gets the URL for an asset attached to a module\nParameters:\n- name(String) The name of the asset",
    "prefix": "~module_asset_url"
  },
  "namespace": {
    "body": [
      "namespace(${1:dictionary}, ${2:kwargs})"
    ],
    "description": "Create a namespace object that can hold arbitrary attributes.It may be initialized from a dictionary or with keyword arguments.\nParameters:\n- dictionary(Map) The dictionary to initialize with\n- kwargs(NamedParameter...) Keyword arguments to put into the namespace dictionary",
    "prefix": "~namespace"
  },
  "oembed": {
    "body": [
      "oembed('${1:request}')"
    ],
    "description": "Returns OEmbed data dictionary for given request. Only works in emails.\nParameters:\n- request(String) Request object, {url: string, max_width: long, max_height: long}",
    "prefix": "~oembed"
  },
  "page_by_id": {
    "body": [
      "page_by_id(${1:page_id})"
    ],
    "description": "Returns a landing or website page by id\nParameters:\n- page_id(id) The id of the page to look up",
    "prefix": "~page_by_id"
  },
  "personalization_api_url": {
    "body": [
      "personalization_api_url(${1:contact_properties}, ${2:company_properties})"
    ],
    "description": "Generates a signed URL path and query string to the Content Personalization API, specific to the hubid and provided properties parameters. Any changes to the 'contactProperties' or 'companyProperties' parameters will require generating a new signed URL with an updated 'sig' parameter. Note that no signature is required if no company or contact properties will be requested.\nParameters:\n- contact_properties(comma-delimited string) The list of contact properties to request. Additionally, a contact's list (CLS) memberships and ILS memberships can be requested as 'listMemberships' and 'ilsMemberships' respectively.\n- company_properties(comma-delimited string) The list of company properties to request.",
    "prefix": "~personalization_api_url"
  },
  "personalization_token": {
    "body": [
      "personalization_token(${1:expression}, ${2:default})"
    ],
    "description": "Returns the value of a contact or contact related property, or a default.\nParameters:\n- expression(string) An expression for the object and property to render\n- default(string) (Optional) A default value to use if the expression has no value",
    "prefix": "~personalization_token"
  },
  "postal_location": {
    "body": [
      "postal_location(${1:postal_code}, ${2:country_code})"
    ],
    "description": "Returns the lat/lon location of a postal code\nParameters:\n- postal_code(string) postal code of the location\n- country_code(string) Country code for the postal code",
    "prefix": "~postal_location"
  },
  "product_recommendations": {
    "body": [
      "product_recommendations(${1:store_id}, ${2:limit}, ${3:currency}, ${4:min_price}, ${5:max_price}, ${6:enable_price_formatting})"
    ],
    "description": "Returns a list of products of most popular products in a portal based on their appearance in deals \nParameters:\n- store_id(string) The ID of the ecommerce store or 'all' or 'HS'\n- limit(number) The max number of products to fetch\n- currency(string) The optional currency\n- min_price(number) The optional min price\n- max_price(number) The optional max price\n- enable_price_formatting(boolean) The optional flag to enable price formatting. Default to true.",
    "prefix": "~product_recommendations"
  },
  "range": {
    "body": [
      "range(${1:start}, ${2:end}, ${3:step})"
    ],
    "description": "Return a list containing an arithmetic progression of integers. With one parameter, range will return a list from 0 up to (but not including) the value. With two parameters, the range will start at the first value and increment by 1 up to (but not including) the second value. The third parameter specifies the step increment. All values can be negative. Impossible ranges will return an empty list. Ranges can generate a maximum of 1000 values.\nParameters:\n- start(number) \n- end(number) \n- step(number) ",
    "prefix": "~range"
  },
  "require_css": {
    "body": [
      "require_css('${1:url}', ${2:render_options})"
    ],
    "description": "Loads a css file to be output in the head\nParameters:\n- url(String) URL of the CSS resource to be loaded on the page\n- render_options(dict) Dictionary of options to modify generated tag. Supports 'async'(true/false) and any other key-value pair will be added as HTML attributes to the style tag.",
    "prefix": "~require_css"
  },
  "require_js": {
    "body": [
      "require_js('${1:url}', ${2:render_options})"
    ],
    "description": "Enqueues a js file to be output in the head or footer\nParameters:\n- url(String) URL of the JavaScript resource to be loaded on the page\n- render_options(dict) Dictionary of options to modify generated tag. Supports 'position'('head'/'footer'), 'defer'(true/false), 'async'(true/false), and any other key-value pair will be added as HTML attributes to the script tag.",
    "prefix": "~require_js"
  },
  "resize_image_url": {
    "body": [
      "resize_image_url(${1:url}, ${2:width}, ${3:height}, ${4:length}, ${5:upscale}, ${6:upsize})"
    ],
    "description": "Rewrites the URL of an image in File Manager to a URL that will resize the image on request\nParameters:\n- url(string) URL of a HubSpot-hosted image\n- width(number) the new image width, in pixels\n- height(number) the new image height, in pixels\n- length(number) the new length of the largest side, in pixels\n- upscale(boolean) use the resized image dimensions even if they would scale up the original image (images may appear blurry)\n- upsize(boolean) return the resized image even if it is larger than the original in bytes",
    "prefix": "~resize_image_url"
  },
  "script_embed": {
    "body": [
      "script_embed('${1:type}', '${2:src}', '${3:title}', '${4:options}', '${5:description}')"
    ],
    "description": "Defines an embeddable object which renders differently in the editor vs a live page\nParameters:\n- type(String) Type of embeddable object (wistia|embedly)\n- src(String) Object source\n- title(String) Object title\n- options(String) Options for particular type of embed\n- description(String) Description of embed for SEO purposes",
    "prefix": "~script_embed"
  },
  "set_response_code": {
    "body": [
      "set_response_code(${1:code})"
    ],
    "description": "Set the respond code as the specified code. 404 is the only supported code for now.\nParameters:\n- code(integer) The http response code",
    "prefix": "~set_response_code"
  },
  "sign_postlisting_url": {
    "body": [
      "sign_postlisting_url(${1:blog_id}, ${2:list_type}, ${3:max_links}, ${4:tag_name})"
    ],
    "description": "Returns a signed URL for the provided URL\nParameters:\n- blog_id(number or default) The id of the blog or default blog for the postlisting.\n- list_type(string) The type of the postlisting.\n- max_links(number) The max links in the postlisting.\n- tag_name(string) The name of a tag on which to filter results",
    "prefix": "~sign_postlisting_url"
  },
  "strtodate": {
    "body": [
      "strtodate(${1:dateString}, ${2:dateFormat})"
    ],
    "description": "converts a string and date format into a date object\nParameters:\n- dateString(string) date as string\n- dateFormat(string) format of the date string",
    "prefix": "~strtodate"
  },
  "strtotime": {
    "body": [
      "strtotime(${1:var}, ${2:var})"
    ],
    "description": "converts a string and datetime format into a datetime object\nParameters:\n- var(datetimeString) datetime as string\n- var(datetimeFormat) format of the datetime string",
    "prefix": "~strtotime"
  },
  "super": {
    "body": [
      "super()"
    ],
    "description": "Only usable within blocks, will render the contents of the parent block by calling super.",
    "prefix": "~super"
  },
  "to_local_time": {
    "body": [
      "to_local_time(${1:date})"
    ],
    "description": "Converts a UNIX timestamp to a date in the portal's timezone\nParameters:\n- date(datetime) UNIX timestamp to convert to local time",
    "prefix": "~to_local_time"
  },
  "today": {
    "body": [
      "today()"
    ],
    "description": "",
    "prefix": "~today"
  },
  "topic_cluster_by_content_id": {
    "body": [
      "topic_cluster_by_content_id(${1:content_id})"
    ],
    "description": "Returns topic cluster associated with a piece of content.\nParameters:\n- content_id(id) The id of the page to look up",
    "prefix": "~topic_cluster_by_content_id"
  },
  "truncate": {
    "body": [
      "truncate(${1:string}, ${2:length}, ${3:killwords}, '${4:end}')"
    ],
    "description": "truncates a given string to a specified length\nParameters:\n- string(string) String to be truncated\n- length(number) Specifies the length at which to truncate the text (includes HTML characters)\n- killwords(boolean) If true, the string will cut text at length\n- end(String) The characters that will be added to indicate where the text was truncated",
    "prefix": "~truncate"
  },
  "type": {
    "body": [
      "type()"
    ],
    "description": "",
    "prefix": "~type"
  },
  "unique_string": {
    "body": [
      "unique_string(${1:string})"
    ],
    "description": "Creates a distinctive string based on the input string\nParameters:\n- string(string) value used to produce a unique string",
    "prefix": "~unique_string"
  },
  "unixtimestamp": {
    "body": [
      "unixtimestamp()"
    ],
    "description": "",
    "prefix": "~unixtimestamp"
  },
  "video_metadata_by_player_id": {
    "body": [
      "video_metadata_by_player_id(${1:request})"
    ],
    "description": "Returns the metadata of a video by player id. Only works for videos files that allow embedding, sharing, and tracking.\nParameters:\n- request(id) Request object, {id: long, domain: string}. Id is required. Domain is optional and will override the default domain of the video share url.",
    "prefix": "~video_metadata_by_player_id"
  },
  "video_thumbnail": {
    "body": [
      "video_thumbnail('${1:request}')"
    ],
    "description": "Rewrites the URL of an image in File Manager to a URL that will overlay a play button on request.\nParameters:\n- request(String) Request object, {url: string, width: integer, height: integer, color: string scale: double} Url has to be the url of a HubSpot-hosted image. One of height or width is required. Color (optional) is a hex color string. Scale (optional) is a number between 0.1 an 1, default scale is 0.5.",
    "prefix": "~video_thumbnail"
  }
}
